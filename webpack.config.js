const path = require('path');

const wpConfig = require('@wordpress/scripts/config/webpack.config');
const { getWebpackEntryPoints } = require('@wordpress/scripts/utils/config');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { sync: glob } = require('fast-glob');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const FixStyleOnlyEntriesPlugin = require('webpack-fix-style-only-entries');

const isProduction = process.env.NODE_ENV === 'production';
const acfPhpEntries = [];

function getEntriesFromPath(fromPath, extension, pattern = '*') {
  return glob(`./${fromPath}/**/${pattern}.${extension}`).reduce((entries, entry) => {
    const relativePath = path.relative(__dirname, entry).replace(`${fromPath}/`, '');
    const outputDir = path.dirname(relativePath);
    const key = path.join(outputDir, path.basename(relativePath, `.${extension}`));
    entries[key] = entry;
    return entries;
  }, {});
}

function getAcfBlockEntries(fromPath) {
  acfPhpEntries.length = 0;

  return glob(`./${fromPath}/**/block.json`).reduce((entries, entry) => {
    const block = require(entry);

    // if block.json does not have an acf key, then skip it
    if (!block.acf) {
      return entries;
    }

    const outputDir = path.dirname(entry);
    const outputDirKey = outputDir.replace(`${fromPath}/`, '');

    // else return the filepath of acf.renderTemplate property
    if (block.acf['renderTemplate']) {
      const templateFilename = block.acf['renderTemplate'];
      const blockTemplate = path.join(outputDir, templateFilename);
      acfPhpEntries.push(blockTemplate);
    }

    // and the filepath of style property
    if (block.style) {
      const styleFilename = 'style.scss';
      const blockStyle = './' + path.join(outputDir, styleFilename);
      const key = path.join(outputDirKey, 'index');
      entries[key] = blockStyle;
    }

    return entries;
  }, {});
}

/**
 * Override the default WordPress config
 */
const defaultConfig = {
  ...wpConfig,
  entry: {
    // Default WordPress entry points
    ...getWebpackEntryPoints(),
    // ACF blocks stylesheets entry points
    ...getAcfBlockEntries('src'),
    // Format types entry points
    ...getEntriesFromPath('src', 'ts', 'format-types/**/index'),
  },
  plugins: [
    // Default plugins
    ...wpConfig.plugins,
    // Copy PHP files from ACF blocks
    new CopyWebpackPlugin({
      patterns: [
        {
          from: 'blocks/**/*.php',
          context: 'src',
          noErrorOnMissing: true,
          filter: entry => acfPhpEntries.includes(path.relative(__dirname, entry)),
        },
      ],
    }),
  ],
};

/**
 * Assets config
 */
const assetsConfig = {
  mode: isProduction ? 'production' : 'development',
  entry: getEntriesFromPath('assets/scss', 'scss'),
  output: {
    path: path.resolve(process.cwd(), 'assets/css'),
  },
  module: {
    rules: [
      {
        test: /\.scss$/,
        exclude: '/node_modules',
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'sass-loader'],
      },
    ],
  },
  plugins: [
    // Remove js files generated by MiniCssExtractPlugin
    new FixStyleOnlyEntriesPlugin(),
    new MiniCssExtractPlugin(),
  ],
};

module.exports = [defaultConfig, assetsConfig];
